
# Chain
REACT_APP__BUILD_NUMBER=dev

REACT_APP__IS_MAINNET=testnet

REACT_APP__DEFAULT_PAIR=QUBE/ATOM

# Add development tokens
REACT_APP__DEV_ASSET_MAP={"tokenA":"QUBE/qube","tokenB":"ATOM/cosmoshub","tokenC":"USDC/ethereum","tokenD":"DAI/gateway","tokenE":"HUAHUA/chihuahua","tokenF":"USQ/qube"}
# Add prices for development tokens
REACT_APP__DEV_ASSET_PRICE_MAP={"USQ":1}

# Override chain name
REACT_APP__CHAIN_ID=qube-2
REACT_APP__CHAIN_NAME=Qube testnet
REACT_APP__CHAIN_FEE_TOKENS=[{"denom":"uqube"}]
# An example of using bridged IBC tokens as fee tokens in the consumer chain:
# note: IBC denom trace "transfer/channel-0/uatom" is
#       IBC denom hash "ibc/27394FB092D2ECCD56123C74F36E4C1F926001CEADA9CA97EA622B25F41E5EB2"
#
# REACT_APP__CHAIN={"chain_name":"duality"}
# REACT_APP__CHAIN_FEE_TOKENS=[{"denom":"ibc/3C3D7B3BE4ECC85A0E5B52A3AEC3B7DFC2AA9CA47C37821E57020D6807043BE9"}]

# local setup:
#
# if you are using the integrated tests CosmoPark environment locally:
# the CosmosHub instance of uatom will be the IBC token "ibc/27394FB092D2ECCD56123C74F36E4C1F926001CEADA9CA97EA622B25F41E5EB2" on the Neutron chain
# you can send this token from the instance by using the commands:
# $ docker compose -f setup/docker-compose.yml exec gaia-node /bin/sh
# $ gaiad --home /opt/node/data/test-2 --chain-id test-2 tx ibc-transfer transfer transfer channel-0 [local_cosmopark_neutron_address] 10000000uatom --from val1 --keyring-backend test --gas 10000000 --fees 50000uatom -y
# or all together:
# $ docker compose -f setup/docker-compose.yml exec gaia-node /usr/local/bin/gaiad --home /opt/node/data/test-2 --chain-id test-2 tx ibc-transfer transfer transfer channel-0 [local_cosmopark_neutron_address] 10000000uatom --from val1 --keyring-backend test --gas 10000000 --fees 50000uatom -y
