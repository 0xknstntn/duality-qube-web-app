import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
* This file and any referenced files were automatically generated by @cosmology/telescope@0.109.4
* DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain
* and run the transpile command or yarn proto command to regenerate this bundle.
*/

import { getRpcClient } from './extern';
import { useQuery } from '@tanstack/react-query';
import { Tendermint34Client } from '@cosmjs/tendermint-rpc';
export const useRpcEndpoint = ({
  getter,
  options
}) => {
  return useQuery(['rpcEndpoint', getter], async () => {
    return await getter();
  }, options);
};
export const useRpcClient = ({
  rpcEndpoint,
  options
}) => {
  return useQuery(['rpcClient', rpcEndpoint], async () => {
    return await getRpcClient(rpcEndpoint);
  }, options);
};
/**
 * Hook that uses react-query to cache a connected tendermint client.
 */
export const useTendermintClient = ({
  rpcEndpoint,
  options
}) => {
  const {
    data: client
  } = useQuery(['client', 'tendermint', rpcEndpoint], () => Tendermint34Client.connect(rpcEndpoint), _objectSpread({
    // allow overriding
    onError: e => {
      throw new Error(`Failed to connect to ${rpcEndpoint}` + '\n' + e);
    }
  }, options));
  return {
    client
  };
};